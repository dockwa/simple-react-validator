// Simple React Validator v1.0.7 | Created By Dockwa | MIT License | 2017 - Present
!function(e,t){"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?module.exports=t(require("react")):e.SimpleReactValidator=t(e.React)}(this,function(s){"use strict";function b(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],a=!0,n=!1,s=void 0;try{for(var i,u=e[Symbol.iterator]();!(a=(i=u.next()).done)&&(r.push(i.value),!t||r.length!==t);a=!0);}catch(e){n=!0,s=e}finally{try{a||null==u.return||u.return()}finally{if(n)throw s}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},a=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),a.forEach(function(e){u(t,e,r[e])})}return t}function a(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function u(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var e=function(){function n(){var r=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"en";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),u(this,"helpers",{parent:this,passes:function(e,t,r,a){return a.hasOwnProperty(e)?!(this.isRequired(e,a)||!this.isBlank(t))||!1!==a[e].rule(t,r,this.parent):(console.error("Rule Not Found: There is no rule with the name ".concat(e,".")),!0)},isRequired:function(e,t){return t[e].hasOwnProperty("required")&&t[e].required},isBlank:function(e){return null==e||""===e},normalizeValues:function(e,t){return[this.valueOrEmptyString(e),this.getValidation(t),this.getOptions(t)]},getValidation:function(e){return e===Object(e)&&Object.keys(e).length?Object.keys(e)[0]:e.split(":")[0]},getOptions:function(e){if(e===Object(e)&&Object.values(e).length){var t=Object.values(e)[0];return Array.isArray(t)?t:[t]}return 1<(t=e.split(":")).length?t[1].split(","):[]},valueOrEmptyString:function(e){return null==e?"":e},toSentence:function(e){return e.slice(0,-2).join(", ")+(e.slice(0,-2).length?", ":"")+e.slice(-2).join(2<e.length?", or ":" or ")},testRegex:function(e,t){return null!==e.toString().match(t)},message:function(e,t,r,a){r.messages=r.messages||{};var n=r.messages[e]||r.messages.default||this.parent.messages[e]||this.parent.messages.default||a[e].message;return n.replace(":attribute",this.humanizeFieldName(t))},humanizeFieldName:function(e){return e.replace(/([A-Z])/g," $1").replace(/_/g," ").toLowerCase()},element:function(e,t){var r=t.element||this.parent.element;return r(e,t.className)},numeric:function(e){return this.testRegex(e,/^(\d+.?\d*)?$/)},momentInstalled:function(){return!(!window||!window.moment)||(console.warn("Date validators require using momentjs https://momentjs.com and moment objects."),!1)},size:function(e,t){return"string"===t||void 0===t||"array"===t?e.length:"num"===t?parseFloat(e):void 0},sizeText:function(e){return"string"===e||void 0===e?" characters":"array"===e?" elements":""}}),this.fields={},this.errorMessages={},this.messagesShown=!1;var a=o(t);this.rules=g({accepted:{message:a.accepted,rule:function(e){return!0===e},required:!0},after:{message:a.after,rule:function(e,t){return r.helpers.momentInstalled()&&moment.isMoment(e)&&e.isAfter(t[0],"day")},messageReplace:function(e,t){return e.replace(":date",t[0].format("MM/DD/YYYY"))}},after_or_equal:{message:a.after_or_equal,rule:function(e,t){return r.helpers.momentInstalled()&&moment.isMoment(e)&&e.isSameOrAfter(t[0],"day")},messageReplace:function(e,t){return e.replace(":date",t[0].format("MM/DD/YYYY"))}},alpha:{message:a.alpha,rule:function(e){return r.helpers.testRegex(e,/^[A-Z]*$/i)}},alpha_space:{message:a.alpha_space,rule:function(e){return r.helpers.testRegex(e,/^[A-Z\s]*$/i)}},alpha_num:{message:a.alpha_num,rule:function(e){return r.helpers.testRegex(e,/^[A-Z0-9]*$/i)}},alpha_num_space:{message:a.alpha_num_space,rule:function(e){return r.helpers.testRegex(e,/^[A-Z0-9\s]*$/i)}},alpha_num_dash:{message:a.alpha_num_dash,rule:function(e){return r.helpers.testRegex(e,/^[A-Z0-9_-]*$/i)}},alpha_num_dash_space:{message:a.alpha_num_dash_space,rule:function(e){return r.helpers.testRegex(e,/^[A-Z0-9_-\s]*$/i)}},array:{message:a.array,rule:function(e){return Array.isArray(e)}},before:{message:a.before,rule:function(e,t){return r.helpers.momentInstalled()&&moment.isMoment(e)&&e.isBefore(t[0],"day")},messageReplace:function(e,t){return e.replace(":date",t[0].format("MM/DD/YYYY"))}},before_or_equal:{message:a.before_or_equal,rule:function(e,t){return r.helpers.momentInstalled()&&moment.isMoment(e)&&e.isSameOrBefore(t[0],"day")},messageReplace:function(e,t){return e.replace(":date",t[0].format("MM/DD/YYYY"))}},between:{message:a.between,rule:function(e,t){return r.helpers.size(e,t[2])>=parseFloat(t[0])&&r.helpers.size(e,t[2])<=parseFloat(t[1])},messageReplace:function(e,t){return e.replace(":min",t[0]).replace(":max",t[1]).replace(":type",r.helpers.sizeText(t[2]))}},boolean:{message:a.boolean,rule:function(e){return!1===e||!0===e}},card_exp:{message:a.card_exp,rule:function(e){return r.helpers.testRegex(e,/^(([0]?[1-9]{1})|([1]{1}[0-2]{1}))\s?\/\s?(\d{2}|\d{4})$/)}},card_num:{message:a.card_num,rule:function(e){return r.helpers.testRegex(e,/^\d{4}\s?\d{4,6}\s?\d{4,5}\s?\d{0,8}$/)}},currency:{message:a.currency,rule:function(e){return r.helpers.testRegex(e,/^\$?(\d{1,3})(\,?\d{3})*\.?\d{0,2}$/)}},date:{message:a.date,rule:function(e){return r.helpers.momentInstalled()&&moment.isMoment(e)}},date_equals:{message:a.date_equals,rule:function(e,t){return r.helpers.momentInstalled()&&moment.isMoment(e)&&e.isSame(t[0],"day")},messageReplace:function(e,t){return e.replace(":date",t[0].format("MM/DD/YYYY"))}},email:{message:a.email,rule:function(e){return r.helpers.testRegex(e,/^[A-Z0-9.!#$%&'*+-/=?^_`{|}~]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i)}},in:{message:a.in,rule:function(e,t){return-1<t.indexOf(e)},messageReplace:function(e,t){return e.replace(":values",r.helpers.toSentence(t))}},integer:{message:a.integer,rule:function(e){return r.helpers.testRegex(e,/^\d*$/)}},max:{message:a.max,rule:function(e,t){return r.helpers.size(e,t[1])<=parseFloat(t[0])},messageReplace:function(e,t){return e.replace(":max",t[0]).replace(":type",r.helpers.sizeText(t[1]))}},min:{message:a.min,rule:function(e,t){return r.helpers.size(e,t[1])>=parseFloat(t[0])},messageReplace:function(e,t){return e.replace(":min",t[0]).replace(":type",r.helpers.sizeText(t[1]))}},not_in:{message:a.not_in,rule:function(e,t){return-1===t.indexOf(e)},messageReplace:function(e,t){return e.replace(":values",r.helpers.toSentence(t))}},not_regex:{message:a.not_regex,rule:function(e,t){return!r.helpers.testRegex(e,"string"==typeof t[0]||t[0]instanceof String?new RegExp(t[0]):t[0])}},numeric:{message:a.numeric,rule:function(e){return r.helpers.numeric(e)}},phone:{message:a.phone,rule:function(e){return r.helpers.testRegex(e,/^(\+?\d{0,4})?\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{4}\)?)?$/)}},regex:{message:a.regex,rule:function(e,t){return r.helpers.testRegex(e,"string"==typeof t[0]||t[0]instanceof String?new RegExp(t[0]):t[0])}},required:{message:a.required,rule:function(e){return!r.helpers.isBlank(e)},required:!0},size:{message:a.size,rule:function(e,t){return r.helpers.size(e,t[1])==parseFloat(t[0])},messageReplace:function(e,t){return e.replace(":size",t[0]).replace(":type",r.helpers.sizeText(t[1]))}},string:{message:a.string,rule:function(e){return i(e)===i("string")}},typeof:{message:a.typeof,rule:function(e,t){return i(e)===i(t[0])},messageReplace:function(e,t){return e.replace(":type",i(t[0]))}},url:{message:a.url,rule:function(e){return r.helpers.testRegex(e,/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i)}}},e.validators||{}),this.messages=e.messages||{},this.className=e.className,!1===e.element?this.element=function(e){return e}:e.hasOwnProperty("element")?this.element=e.element:"object"===("undefined"==typeof navigator?"undefined":i(navigator))&&"ReactNative"===navigator.product?this.element=function(e){return e}:this.element=function(e,t){return s.createElement("div",{className:t||r.className||"srv-validation-message"},e)}}var e,t,r;return e=n,(t=[{key:"getErrorMessages",value:function(){return this.errorMessages}},{key:"showMessages",value:function(){this.messagesShown=!0}},{key:"hideMessages",value:function(){this.messagesShown=!1}},{key:"allValid",value:function(){for(var e in this.fields)if(!1===this.fieldValid(e))return!1;return!0}},{key:"fieldValid",value:function(e){return this.fields.hasOwnProperty(e)&&!0===this.fields[e]}},{key:"purgeFields",value:function(){this.fields={},this.errorMessages={}}},{key:"messageWhenPresent",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(!this.helpers.isBlank(e)&&this.messagesShown)return this.helpers.element(e,t)}},{key:"messageAlways",value:function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};if(console.warn("The messageAlways() method is deprecated in SimpleReactValidator. Please see the documentation and switch to the messageWhenPresent() method."),t&&this.messagesShown)return this.helpers.element(t,r)}},{key:"message",value:function(e,t,r){var a=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{};this.errorMessages[e]=null,this.fields[e]=!0,Array.isArray(r)||(r=r.split("|"));var n=a.validators?g({},this.rules,a.validators):this.rules,s=!0,i=!1,u=void 0;try{for(var o,l=r[Symbol.iterator]();!(s=(o=l.next()).done);s=!0){var c=o.value,m=b(this.helpers.normalizeValues(t,c),3),p=m[0],h=m[1],d=m[2];if(!this.helpers.passes(h,p,d,n)){this.fields[e]=!1;var f=this.helpers.message(h,e,a,n);if(0<d.length&&n[h].hasOwnProperty("messageReplace")&&(f=n[h].messageReplace(f,d)),this.errorMessages[e]=f,this.messagesShown)return this.helpers.element(f,a)}}}catch(e){i=!0,u=e}finally{try{s||null==l.return||l.return()}finally{if(i)throw u}}}}])&&a(e.prototype,t),r&&a(e,r),n}(),t={accepted:"The :attribute must be accepted.",after:"The :attribute must be after :date.",after_or_equal:"The :attribute must be after or on :date.",alpha:"The :attribute may only contain letters.",alpha_space:"The :attribute may only contain letters and spaces.",alpha_num:"The :attribute may only contain letters and numbers.",alpha_num_space:"The :attribute may only contain letters, numbers, and spaces.",alpha_num_dash:"The :attribute may only contain letters, numbers, and dashes.",alpha_num_dash_space:"The :attribute may only contain letters, numbers, dashes, and spaces.",array:"The :attribute must be an array.",before:"The :attribute must be before :date.",before_or_equal:"The :attribute must be before or on :date.",between:"The :attribute must be between :min and :max:type.",boolean:"The :attribute must be a boolean.",card_exp:"The :attribute must be a valid expiration date.",card_num:"The :attribute must be a valid credit card number.",currency:"The :attribute must be a valid currency.",date:"The :attribute must be a date.",date_equals:"The :attribute must be on :date.",email:"The :attribute must be a valid email address.",in:"The selected :attribute must be :values.",integer:"The :attribute must be an integer.",max:"The :attribute may not be greater than :max:type.",min:"The :attribute must be at least :min:type.",not_in:"The selected :attribute must not be :values.",not_regex:"The :attribute must not match the required pattern.",numeric:"The :attribute must be a number.",phone:"The :attribute must be a valid phone number.",regex:"The :attribute must match the required pattern.",required:"The :attribute field is required.",size:"The :attribute must be :size:type.",string:"The :attribute must be a string.",typeof:"The :attribute is not the correct type of :type.",url:"The :attribute must be a url."},r={accepted:"Le champ :attribute doit être accepté.",after:"Le champ :attribute doit être après :date.",after_or_equal:"Le champ :attribute doit correspondre ou bien être après :date.",alpha:"Le champ :attribute ne peut contenir que des lettres.",alpha_space:"Le champ :attribute ne peut contenir que des lettres et des espaces.",alpha_num:"Le champ :attribute ne peut contenir que des lettres et des chiffres.",alpha_num_space:"Le champ :attribute ne peut contenir que des lettres, chiffres, et espaces.",alpha_num_dash:"Le champ :attribute ne peut contenir que des lettres, chiffres, et tirets.",alpha_num_dash_space:"Le champ :attribute ne peut contenir que des lettres, chiffres, tirets, et espaces.",array:"Le champ :attribute doit êttre un tableau.",before:"Le champ :attribute doit être avant :date.",before_or_equal:"Le champ :attribute doit correspondre ou bien être avant  :date.",between:"Le champ :attribute doit être entre :min et :max:type.",boolean:"Le champ :attribute doit être booléen.",card_exp:"Le champ :attribute doit être une date d'expiration valide.",card_num:"Le champ :attribute doit être un numéro valide de carte de crédit .",currency:"Le champ :attribute doit être une devise valide.",date:"Le champ :attribute doit être une date.",date_equals:"Le champ :attribute doit correspondre à :date.",email:"Le champ :attribute doit êre une adresse email valide.",in:"Le champ selectionné :attribute doit être :values.",integer:"Le champ :attribute doit être un entier.",max:"Le champ :attribute ne doit pas dépasser :max:type.",min:"Le champ :attribute doit au moins être :min:type.",not_in:"Le champ selectionné :attribute ne doit pas être :values.",not_regex:"Le champ :attribute ne doit pas correspondre au motif requis.",numeric:"Le champ :attribute doit être un chiffre.",phone:"Le champ :attribute doit être un numéro de téléphone valide.",regex:"Le champ :attribute doit correspondre au motif requis.",required:"Le champ :attribute est requis.",size:"Le champ :attribute doit être :size:type.",string:"Le champ :attribute doit être une chaîne.",typeof:"Le champ :attribute n'est pas le type correcte de :type.",url:"Le champ :attribute doit être un url."},o=function(e){return"fr"===e?r:t};return e});